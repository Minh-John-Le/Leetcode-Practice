class Solution {
    int counter = 0;
    public int maxAreaOfIsland(int[][] grid) {
        
        int maxArea = 0;
        
        for(int i = 0; i < grid.length; i++)
        {
            for(int j = 0; j < grid[0].length; j++)
            {
                if(grid[i][j] == 1)
                {
                    counter = 0;
                    maxAreaOfIslandHelper(grid, i, j);
                    maxArea = Math.max(maxArea, counter);
                }
            }
        }
        
            
        return maxArea;
    }
    
    private void maxAreaOfIslandHelper(int[][] grid, int r, int c)
    {

        if (grid[r][c] == 1)
        {
        
            counter++;
            grid[r][c] = 0;

            if (r + 1 < grid.length)
                maxAreaOfIslandHelper(grid, r + 1, c); //right
            if (r - 1 >= 0)
                maxAreaOfIslandHelper(grid, r - 1, c); //left
            if (c + 1 < grid[0].length)
                maxAreaOfIslandHelper(grid, r, c + 1); //up
            if (c - 1 >= 0 )
                maxAreaOfIslandHelper(grid, r, c - 1); //down
        }
    }
    
}

/*
Idea:
Go through each block and recursively count them as well as 4 adjection block. After counting them me mark them as 0 to indicate it get counted. 

Run Time O(mxn) since iterate thorugh the matric once

*/
