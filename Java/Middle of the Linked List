/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode trackNode = head;
        ListNode initialNode = head;
        
        while(n > 0)
        {
            n--;
            head = head.next;
        }
        
        if(head == null)
        {
            return initialNode.next;
        }
        
        head = head.next;
        
        while(head != null)
        {
            head = head.next;
            trackNode = trackNode.next;
        }
        
        trackNode.next = trackNode.next.next;
        return initialNode;
    }
        
}

/*
idea is having 2 pointer with the the late pointer have offset equals to the index of fure remove Node. 
When fast pointer reach the end, we will 1 index before the one need to remove
run-timr O(n) since we iterate through list once


*/
