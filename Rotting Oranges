class Solution {
    public int orangesRotting(int[][] mat) {
        boolean[][] isCheck = new boolean[mat.length][mat[0].length];
        LinkedList<Grid> queue = new LinkedList<Grid>();
        int minute = 0;
        boolean atLeastOneFresh = false;

        // Initialize result
        for (int i = 0; i < mat.length; i++)
        {
            for (int j = 0; j < mat[0].length; j++)
            {
                if(mat[i][j] == 2)
                {
                    queue.add(new Grid(i,j));
                    isCheck[i][j] = true;
                }
                else if(mat[i][j] == 0)
                {
                    isCheck[i][j] = true;
                }
                else
                {
                    atLeastOneFresh = true;
                }
               
            }
        }
        
        if(!atLeastOneFresh)
        {
            return 0;
        }
        while(queue.size() > 0)
        {
            int size = queue.size();
            minute++;
            for (int i = 0; i < size; i++)
            {
                Grid grid = queue.getFirst();
                // Update the grid
                isCheck[grid.r][grid.c] = true;

                if(grid.r + 1 < mat.length) // update right grid   
                { 
                    mat[grid.r + 1][grid.c] += 2;
                    if(!isCheck[grid.r + 1][grid.c] && mat[grid.r + 1][grid.c] >= 2)
                        queue.add(new Grid(grid.r + 1, grid.c)); // put this grid into queue
                        isCheck[grid.r + 1][grid.c] = true;
                }
                
                if(grid.r - 1 >= 0) // update left grid   
                { 
                    mat[grid.r -1][grid.c] += 2;
                    if(!isCheck[grid.r - 1][grid.c] && mat[grid.r - 1][grid.c] >= 2)
                        queue.add(new Grid(grid.r - 1, grid.c)); // put this grid into queue
                        isCheck[grid.r - 1][grid.c] = true;
                }
                
                if(grid.c - 1 >= 0) // update left grid   
                { 
                    mat[grid.r][grid.c - 1] += 2;
                    if(!isCheck[grid.r][grid.c - 1] && mat[grid.r][grid.c - 1] >= 2)
                        queue.add(new Grid(grid.r, grid.c - 1)); // put this grid into queue
                        isCheck[grid.r][grid.c -1] = true;
                }
                
                if(grid.c + 1 < mat[0].length) // update left grid   
                { 
                    mat[grid.r][grid.c + 1] += 2;
                    if(!isCheck[grid.r][grid.c + 1] && mat[grid.r][grid.c + 1] >= 2)
                        queue.add(new Grid(grid.r, grid.c + 1)); // put this grid into queue
                        isCheck[grid.r][grid.c + 1] = true;
                }

                queue.remove();
            }
        }
        
        for (int i = 0; i < mat.length; i++)
        {
            for (int j = 0; j < mat[0].length; j++)
            {
                if(mat[i][j] == 1)
                {
                    return -1;
                }
            }
        }
        
        return minute - 1;
        
    }
    
    private class Grid
    {
        int r = 0;
        int c = 0;
        public Grid(int r, int c)
        {
            this.r = r;
            this.c = c;
        }
    }
}
